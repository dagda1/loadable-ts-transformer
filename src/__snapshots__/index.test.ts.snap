// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transformer Magic comment should remove only needed comments 1`] = `
"const load = /* #__LOADABLE__ */ /* IMPORTANT! */ () => import('moment');
"
`;

exports[`transformer Magic comment should transpile arrow functions 1`] = `
"const load = /* #__LOADABLE__ */ () => import('moment');
"
`;

exports[`transformer Magic comment should transpile function expression 1`] = `
"const load = /* #__LOADABLE__ */ function () {
    return import('moment');
};
"
`;

exports[`transformer Magic comment should transpile shortand properties 1`] = `
"const obj = {
    /* #__LOADABLE__ */
    load() {
        return import('moment');
    }
};
"
`;

exports[`transformer aggressive import should work with destructuration 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName({ foo }) {
        return \`\${foo}\`.replace([^a-zA-Z0-9_!§$()=\\\\-^°]+, \\"-\\");
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: ({ foo }) => import(/* webpackChunkName: \\"[request]\\" */ \`./\${foo}\`),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackChunkName: \\"[request]\\" */ \`./\${foo}\`) : eval(\\"require.resolve\\")(/* webpackChunkName: \\"[request]\\" */ \`./\${foo}\`);
    }
});
"
`;

exports[`transformer aggressive import with "webpackChunkName" should replace it 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName(props) {
        return \`\${props-foo}\`.replace([^a-zA-Z0-9_!§$()=\\\\-^°]+, \\"-\\");
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: props => import(/* webpackChunkName: \\"[request]\\" */ \`./\${props.foo}\`),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackChunkName: \\"[request]\\" */ \`./\${props.foo}\`) : eval(\\"require.resolve\\")(/* webpackChunkName: \\"[request]\\" */ \`./\${props.foo}\`);
    }
});
"
`;

exports[`transformer aggressive import without "webpackChunkName" should support complex request 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName(props) {
        return \`\${props-foo-test}\`.replace([^a-zA-Z0-9_!§$()=\\\\-^°]+, \\"-\\");
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: props => import(/* webpackChunkName: \\"/test[request]\\" */ \`./dir/\${props.foo}/test\`),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackChunkName: \\"/test[request]\\" */ \`./dir/\${props.foo}/test\`) : eval(\\"require.resolve\\")(/* webpackChunkName: \\"/test[request]\\" */ \`./dir/\${props.foo}/test\`);
    }
});
"
`;

exports[`transformer aggressive import without "webpackChunkName" should support destructuring 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName({ foo }) {
        return \`\${foo-test}\`.replace([^a-zA-Z0-9_!§$()=\\\\-^°]+, \\"-\\");
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: ({ foo }) => import(/* webpackChunkName: \\"/test[request]\\" */ \`./dir/\${foo}/test\`),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackChunkName: \\"/test[request]\\" */ \`./dir/\${foo}/test\`) : eval(\\"require.resolve\\")(/* webpackChunkName: \\"/test[request]\\" */ \`./dir/\${foo}/test\`);
    }
});
"
`;

exports[`transformer aggressive import without "webpackChunkName" should support simple request 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName(props) {
        return \`\${props-foo}\`.replace([^a-zA-Z0-9_!§$()=\\\\-^°]+, \\"-\\");
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: props => import(/* webpackChunkName: \\"[request]\\" */ \`./\${props.foo}\`),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackChunkName: \\"[request]\\" */ \`./\${props.foo}\`) : eval(\\"require.resolve\\")(/* webpackChunkName: \\"[request]\\" */ \`./\${props.foo}\`);
    }
});
"
`;

exports[`transformer loadable.lib should be transpiled too 1`] = `
"loadable.lib(() => import('moment'));
"
`;

exports[`transformer simple import in a complex promise should work 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName() {
        return \\"ModA\\";
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: () => timeout(import(/* webpackChunkName: \\"ModA\\" */ './ModA'), 2000),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackChunkName: \\"ModA\\" */ './ModA') : eval(\\"require.resolve\\")(/* webpackChunkName: \\"ModA\\" */ './ModA');
    }
});
"
`;

exports[`transformer simple import should transform path into "chunk-friendly" name 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName() {
        return \\"foo-bar\\";
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: () => import(/* webpackChunkName: \\"foo-bar\\" */ '../foo/bar'),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackChunkName: \\"foo-bar\\" */ '../foo/bar') : eval(\\"require.resolve\\")(/* webpackChunkName: \\"foo-bar\\" */ '../foo/bar');
    }
});
"
`;

exports[`transformer simple import should work with * in name 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName() {
        return \\"foo\\";
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: () => import(/* webpackChunkName: \\"foo\\" */ \`./foo*\`),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackChunkName: \\"foo\\" */ \`./foo*\`) : eval(\\"require.resolve\\")(/* webpackChunkName: \\"foo\\" */ \`./foo*\`);
    }
});
"
`;

exports[`transformer simple import should work with + concatenation 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName() {
        return /* webpackChunkName: \\"\\" */ './Mod' + 'A';
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: () => import(/* webpackChunkName: \\"\\" */ './Mod' + 'A'),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackChunkName: \\"\\" */ './Mod' + 'A') : eval(\\"require.resolve\\")(/* webpackChunkName: \\"\\" */ './Mod' + 'A');
    }
});
"
`;

exports[`transformer simple import should work with template literal 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName() {
        return \\"ModA\\";
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: () => import(/* webpackChunkName: \\"ModA\\" */ \`./ModA\`),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackChunkName: \\"ModA\\" */ \`./ModA\`) : eval(\\"require.resolve\\")(/* webpackChunkName: \\"ModA\\" */ \`./ModA\`);
    }
});
"
`;

exports[`transformer simple import with "webpackChunkName" comment should use it 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName() {
        return \\"ChunkA\\";
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: () => import(/* webpackChunkName: \\"ChunkA\\" */ './ModA'),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackChunkName: \\"ChunkA\\" */ './ModA') : eval(\\"require.resolve\\")(/* webpackChunkName: \\"ChunkA\\" */ './ModA');
    }
});
"
`;

exports[`transformer simple import with "webpackChunkName" comment should use it even if comment is separated by "," 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName() {
        return \\"ChunkA\\";
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: () => import(/* webpackPrefetch: true, webpackChunkName: \\"ChunkA\\" */ './ModA'),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackPrefetch: true, webpackChunkName: \\"ChunkA\\" */ './ModA') : eval(\\"require.resolve\\")(/* webpackPrefetch: true, webpackChunkName: \\"ChunkA\\" */ './ModA');
    }
});
"
`;

exports[`transformer simple import without "webpackChunkName" comment should add it 1`] = `
"function __loadable_isReady__(self, props) {
  if (typeof __webpack_modules__ !== \\"undefined\\") {
    return !!__webpack_modules__[self.resolve(props)];
  }
  
  return false;
}
function __loadable_requireSync__(self, props) {
  var id = self.resolve(props);
  if (typeof __webpack_require__ !== 'undefined') {
    return __webpack_require__(id);
  }
  return eval('module.require')(id);
}
loadable({
    chunkName() {
        return \\"ModA\\";
    },
    isReady(props) {
        return __loadable_isReady__(this, props);
    },
    requireAsync: () => import(/* webpackChunkName: \\"ModA\\" */ './ModA'),
    requireSync(props) {
        return __loadable_requireSync__(this, props);
    },
    resolve() {
        return require.resolveWeak ? require.resolveWeak(/* webpackChunkName: \\"ModA\\" */ './ModA') : eval(\\"require.resolve\\")(/* webpackChunkName: \\"ModA\\" */ './ModA');
    }
});
"
`;
